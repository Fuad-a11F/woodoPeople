import { Reply } from './models/Reply'
import { Topic } from './models/Topic'
import { Comment } from './models/Comment'
import { Sequelize } from 'sequelize-typescript'
import { Reaction } from './models/Reaction'

// const { POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_PORT } = process.env

export const sequelize = new Sequelize({
  dialect: 'postgres',
  host: 'localhost',
  port: 5432,
  username: 'postgres',
  password: 'postgres',
  database: 'postgres',
  models: [Topic, Comment, Reply, Reaction],
  logging: false,
})

export const createClientAndConnect = async () => {
  try {
    console.log('üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    await sequelize.authenticate()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.')

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await sequelize.sync({ alter: true })
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  }
}
